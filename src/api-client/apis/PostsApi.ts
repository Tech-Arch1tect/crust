/* tslint:disable */
/* eslint-disable */
/**
 * Mantle API
 * A static API for blogs that transforms markdown files with frontmatter into JSON endpoints
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MainErrorResponse,
  MainPost,
  MainPostsResponse,
} from '../models/index';
import {
    MainErrorResponseFromJSON,
    MainErrorResponseToJSON,
    MainPostFromJSON,
    MainPostToJSON,
    MainPostsResponseFromJSON,
    MainPostsResponseToJSON,
} from '../models/index';

export interface PostsByPageGetRequest {
    page?: number;
}

export interface PostsBySlugGetRequest {
    slug: string;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Get paginated posts with optional page parameter
     * Get paginated posts
     */
    async postsByPageGetRaw(requestParameters: PostsByPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainPostsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/by-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainPostsResponseFromJSON(jsonValue));
    }

    /**
     * Get paginated posts with optional page parameter
     * Get paginated posts
     */
    async postsByPageGet(requestParameters: PostsByPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainPostsResponse> {
        const response = await this.postsByPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific post by its slug
     * Get post by slug
     */
    async postsBySlugGetRaw(requestParameters: PostsBySlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainPost>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling postsBySlugGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/by-slug`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainPostFromJSON(jsonValue));
    }

    /**
     * Get a specific post by its slug
     * Get post by slug
     */
    async postsBySlugGet(requestParameters: PostsBySlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainPost> {
        const response = await this.postsBySlugGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
