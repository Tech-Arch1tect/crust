/* tslint:disable */
/* eslint-disable */
/**
 * Mantle API
 * A static API for blogs that transforms markdown files with frontmatter into JSON endpoints
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MainErrorResponse,
  MainPostPreview,
  MainPreviewsResponse,
} from '../models/index';
import {
    MainErrorResponseFromJSON,
    MainErrorResponseToJSON,
    MainPostPreviewFromJSON,
    MainPostPreviewToJSON,
    MainPreviewsResponseFromJSON,
    MainPreviewsResponseToJSON,
} from '../models/index';

export interface PreviewsByPageGetRequest {
    page?: number;
}

export interface PreviewsBySlugGetRequest {
    slug: string;
}

/**
 * 
 */
export class PreviewsApi extends runtime.BaseAPI {

    /**
     * Get paginated post previews with optional page parameter
     * Get paginated previews
     */
    async previewsByPageGetRaw(requestParameters: PreviewsByPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainPreviewsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/previews/by-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainPreviewsResponseFromJSON(jsonValue));
    }

    /**
     * Get paginated post previews with optional page parameter
     * Get paginated previews
     */
    async previewsByPageGet(requestParameters: PreviewsByPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainPreviewsResponse> {
        const response = await this.previewsByPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific post preview by its slug
     * Get preview by slug
     */
    async previewsBySlugGetRaw(requestParameters: PreviewsBySlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MainPostPreview>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling previewsBySlugGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/previews/by-slug`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MainPostPreviewFromJSON(jsonValue));
    }

    /**
     * Get a specific post preview by its slug
     * Get preview by slug
     */
    async previewsBySlugGet(requestParameters: PreviewsBySlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MainPostPreview> {
        const response = await this.previewsBySlugGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
